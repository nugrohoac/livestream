// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package schema generated by go-bindata.// sources:
// mutation.graphql
// query.graphql
// schema.graphql
// type/livestream.graphql
// type/pushnotifkelasonline.graphql
// type/rating.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mutationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xc1\x6e\xc2\x30\x0c\x86\xef\x3c\x85\xa7\x49\xd3\xf6\x0a\xbd\xc1\xd8\xa1\x1a\x0c\x06\x6c\x77\xb7\x18\x6a\x11\x9c\xca\x71\x60\x68\xda\xbb\x4f\x2d\x5a\xd3\x89\xe6\x96\xff\xcf\xe7\x3f\xb6\xed\x52\x13\xcc\xa3\xa1\xb1\x17\xf8\x1e\x01\x00\xdc\xc3\xb3\x12\x1a\x81\xd0\x19\x1c\x9f\x08\x82\x29\xe1\x11\xb6\x68\x08\x3b\xaf\x70\x20\x87\x01\xbc\x38\x16\x82\x07\x38\x53\xc1\x82\xda\xc2\x57\x74\xc6\x27\x5a\xb7\xd0\x63\xab\x36\x67\xc3\xe6\x28\x83\xb5\x29\xcb\xfe\x2e\xc9\x97\x9a\x32\x48\x40\x73\x4f\xee\xca\xfb\xe3\xc7\x6a\x76\x8b\x4d\x29\x94\xca\x75\xf3\xed\x3f\xb3\xf3\x96\x3e\x18\x69\x0f\xeb\x9c\x3c\x2c\x63\xe1\x38\x54\x19\x4c\xbc\x77\x84\x92\x2a\xae\x0d\xd5\xc6\x76\x1b\xf5\x22\xdb\x21\xb9\x49\xf9\xe4\x2d\xf9\xa1\xa0\x0d\x61\x59\x91\xe6\xd3\x0c\x72\xb1\x4e\x4e\x6d\x4e\xb0\x3c\xc4\x7a\x10\xad\xe2\xb1\x10\x64\xd7\x16\x1f\x68\x61\x21\x63\xd6\xae\x81\xce\x98\xe3\xd7\x7b\xa4\xd0\x4c\x64\xe6\x8b\xe2\xf2\x3f\x79\x19\x43\xf5\xe6\x8d\x77\xaf\xcd\xee\x16\xed\xea\xb2\x41\x35\x97\x3a\x26\x6e\xa3\xbc\xdf\x93\x76\x0f\xb9\xc4\xeb\xcc\xfb\xf1\x4f\xfd\x05\x8e\x7e\x7e\x03\x00\x00\xff\xff\x5e\xef\xd2\x60\x55\x02\x00\x00")

func mutationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_mutationGraphql,
		"mutation.graphql",
	)
}

func mutationGraphql() (*asset, error) {
	bytes, err := mutationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mutation.graphql", size: 597, mode: os.FileMode(436), modTime: time.Unix(1611663379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2c\x4d\x2d\xaa\x54\xa8\xe6\x52\x50\x50\x50\x70\x4f\x2d\xf1\xc9\x2c\x4b\x2d\x2e\x29\x4a\x4d\xcc\x2d\xd6\x00\x8b\x81\x40\x5a\x66\x4e\x49\x6a\x91\x95\x02\x48\x32\x18\x2c\xe9\x06\x16\x01\x2b\xd0\xb4\x42\x12\x4e\x4d\x4d\xe1\xaa\x05\x04\x00\x00\xff\xff\x22\x28\xda\xc2\x58\x00\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 88, mode: os.FileMode(436), modTime: time.Unix(1611686128, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x60\x81\xdc\xd2\x92\xc4\x92\xcc\xfc\x3c\x2b\x05\x5f\x28\x8b\xab\x16\x10\x00\x00\xff\xff\x8e\x43\x79\x00\x32\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 50, mode: os.FileMode(436), modTime: time.Unix(1611663379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeLivestreamGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\xdb\x6e\xb3\x30\x0c\xc7\xef\x79\x8a\x3c\x07\x77\xf0\x95\x4a\x7c\xcd\xa0\x83\x76\xbb\xa8\xaa\x2a\x50\x0f\xac\x85\x04\x25\xce\xb4\x6a\xea\xbb\x4f\xa4\x55\x39\xac\x77\xf1\xdf\xf6\xcf\xa7\xd0\xa5\x07\xc6\xf1\x0b\x4a\x32\x20\x3a\xf6\x13\x30\xc6\x58\xba\x0a\x59\x49\x06\x55\xe3\xcd\x1d\x92\x84\xb9\x72\xe9\x21\x9c\xe4\x0d\xb6\x77\x14\x5a\x77\xfb\x82\xcf\x82\x57\x60\x6b\x83\x3d\xa1\x56\x33\x7d\xab\x2d\x81\x59\x46\xa7\x76\xeb\x2a\x89\xb6\x0d\x59\xac\xb5\x04\xa1\xbc\x5c\x92\x30\x14\xd1\x2c\x34\x51\xe7\x85\x32\x20\xdf\xf0\x0c\x7a\x49\xdd\x81\xa8\x5b\x30\xc3\x60\xa9\x22\x2f\x8d\xdd\xc7\xa2\xfe\x74\xfd\x9f\x94\xd6\x75\x95\x12\x28\x3d\x70\xd1\x63\xae\x22\x34\xf3\x0e\x5f\xc4\xf7\xab\x03\x3b\x8c\xc9\x75\x55\x5d\xc6\x4a\x5b\x67\xdb\x4c\x13\x7e\x6c\x40\x0a\x9b\x2b\x89\x0a\xc2\xa7\xea\xad\xb0\xc1\xa6\x01\xf3\xf0\x63\x2d\x6e\xbb\x9b\x56\x2b\x04\xa1\x6a\x6c\xc8\x0e\xb7\xd7\x31\xb8\x06\x01\x28\xd7\x2d\xae\x72\xbf\xe8\x26\xe1\x51\x79\xca\x33\x9e\x66\x89\x17\xde\x93\x38\xcd\xa2\xc2\xbf\xf3\xb8\x88\xf8\x29\x8e\xfe\xef\x07\x08\xaa\xde\xd1\x84\xb2\x46\x49\x60\xee\x9c\xcc\x75\xe3\x5c\xff\x9c\xb1\xda\x3c\x36\x73\x0d\x82\xc5\x77\x5a\x03\x9c\xef\x89\x1c\x2d\x85\xec\x30\xfa\x8e\x4f\x11\xbf\x01\x00\x00\xff\xff\xae\x60\xbc\xf9\x90\x02\x00\x00")

func typeLivestreamGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeLivestreamGraphql,
		"type/livestream.graphql",
	)
}

func typeLivestreamGraphql() (*asset, error) {
	bytes, err := typeLivestreamGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/livestream.graphql", size: 656, mode: os.FileMode(436), modTime: time.Unix(1611686128, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typePushnotifkelasonlineGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x28\x2d\xce\xf0\xcb\x2f\xc9\x4c\xf3\x4e\xcd\x49\x2c\xf6\xcf\xcb\xc9\xcc\x4b\x55\xa8\xe6\x52\x50\x50\x50\x08\xc9\x2c\xc9\x49\xb5\x52\x08\x2e\x29\xca\xcc\x4b\x07\x8b\xb8\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\xc1\xc5\x6b\xb9\xb8\x32\xf3\x0a\x4a\x4b\xb0\x9a\xe4\x09\x96\x21\xc9\x38\x40\x00\x00\x00\xff\xff\x07\x0b\x67\x29\x96\x00\x00\x00")

func typePushnotifkelasonlineGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typePushnotifkelasonlineGraphql,
		"type/pushnotifkelasonline.graphql",
	)
}

func typePushnotifkelasonlineGraphql() (*asset, error) {
	bytes, err := typePushnotifkelasonlineGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/pushnotifkelasonline.graphql", size: 150, mode: os.FileMode(436), modTime: time.Unix(1611663379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeRatingGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x0a\x83\x30\x10\x45\xf7\x39\xc5\x9c\xc3\x5d\xb4\x81\x06\x6d\x84\x19\xa5\x4b\xb1\x32\x88\x05\x53\x49\xa7\x05\x29\xde\xbd\x98\x76\x11\xdc\xfd\xf7\xff\x63\x18\x59\x17\x06\xec\x65\xf2\x23\x7c\x14\x00\x80\x3d\x65\x40\x12\x26\x3f\x46\xac\x6f\x77\x1e\xa4\x59\x17\xce\x92\x9c\x4c\x07\xbf\x9a\xde\x4c\x12\xb8\x9f\x0f\x03\x0d\x8f\xc0\x19\x58\x2f\x11\xdb\x27\x87\xdd\xd8\x79\x53\x8a\xfd\x6b\x4e\xee\xff\x7f\x29\x4d\xa5\xa9\xab\x5d\x65\x9d\x89\xc5\xd5\xe4\xd6\x69\x8c\x19\xeb\xa2\xa4\x46\x63\xd7\x18\x5d\x9c\xcd\xaf\x74\x1a\x35\xb5\x97\xdc\xa0\xda\xd4\x37\x00\x00\xff\xff\x9c\x29\x00\x62\xdd\x00\x00\x00")

func typeRatingGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeRatingGraphql,
		"type/rating.graphql",
	)
}

func typeRatingGraphql() (*asset, error) {
	bytes, err := typeRatingGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/rating.graphql", size: 221, mode: os.FileMode(436), modTime: time.Unix(1611663379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mutation.graphql":                  mutationGraphql,
	"query.graphql":                     queryGraphql,
	"schema.graphql":                    schemaGraphql,
	"type/livestream.graphql":           typeLivestreamGraphql,
	"type/pushnotifkelasonline.graphql": typePushnotifkelasonlineGraphql,
	"type/rating.graphql":               typeRatingGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mutation.graphql": &bintree{mutationGraphql, map[string]*bintree{}},
	"query.graphql":    &bintree{queryGraphql, map[string]*bintree{}},
	"schema.graphql":   &bintree{schemaGraphql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"livestream.graphql":           &bintree{typeLivestreamGraphql, map[string]*bintree{}},
		"pushnotifkelasonline.graphql": &bintree{typePushnotifkelasonlineGraphql, map[string]*bintree{}},
		"rating.graphql":               &bintree{typeRatingGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
